#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.3'
__CHEETAH_versionTuple__ = (3, 2, 3, 'final', 0)
__CHEETAH_genTime__ = 1558020936.801224
__CHEETAH_genTimestamp__ = 'Thu May 16 08:35:36 2019'
__CHEETAH_src__ = 'Server.tmpl'
__CHEETAH_srcLastModified__ = 'Thu May 16 08:22:51 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Server(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Server, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''# Created on ''')
        _v = VFFSL(SL,"date",True) # '${date}' on line 1, col 14
        if _v is not None: write(_filter(_v, rawExpr='${date}')) # from line 1, col 14.
        write('''
# Author: ''')
        _v = VFFSL(SL,"user",True) # '${user}' on line 2, col 11
        if _v is not None: write(_filter(_v, rawExpr='${user}')) # from line 2, col 11.
        write('''
''')
        write('''# THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT!!!
''')
        write('''# Interface Documentation: http://cosmosrb.com/docs/interfaces/

INTERFACE ''')
        _v = VFFSL(SL,"target_name",True) # '${target_name}' on line 8, col 11
        if _v is not None: write(_filter(_v, rawExpr='${target_name}')) # from line 8, col 11.
        write('''_INT tcpip_server_interface.rb ''')
        _v = VFFSL(SL,"write_port",True) # '${write_port}' on line 8, col 56
        if _v is not None: write(_filter(_v, rawExpr='${write_port}')) # from line 8, col 56.
        write(''' ''')
        _v = VFFSL(SL,"read_port",True) # '${read_port}' on line 8, col 70
        if _v is not None: write(_filter(_v, rawExpr='${read_port}')) # from line 8, col 70.
        write(''' ''')
        _v = VFFSL(SL,"read_timeout",True) # '${read_timeout}' on line 8, col 83
        if _v is not None: write(_filter(_v, rawExpr='${read_timeout}')) # from line 8, col 83.
        write(''' ''')
        _v = VFFSL(SL,"write_timeout",True) # '${write_timeout}' on line 8, col 99
        if _v is not None: write(_filter(_v, rawExpr='${write_timeout}')) # from line 8, col 99.
        write(''' nil
  TARGET ''')
        _v = VFFSL(SL,"target_name",True) # '${target_name}' on line 9, col 10
        if _v is not None: write(_filter(_v, rawExpr='${target_name}')) # from line 9, col 10.
        write('''
  PROTOCOL WRITE ''')
        _v = VFFSL(SL,"protocol_name_w",True) # '${protocol_name_w}' on line 10, col 18
        if _v is not None: write(_filter(_v, rawExpr='${protocol_name_w}')) # from line 10, col 18.
        write(''' ''')
        _v = VFFSL(SL,"len_bit_offset_w",True) # '${len_bit_offset_w}' on line 10, col 37
        if _v is not None: write(_filter(_v, rawExpr='${len_bit_offset_w}')) # from line 10, col 37.
        write(''' ''')
        _v = VFFSL(SL,"len_bit_size_w",True) # '${len_bit_size_w}' on line 10, col 57
        if _v is not None: write(_filter(_v, rawExpr='${len_bit_size_w}')) # from line 10, col 57.
        write(''' ''')
        _v = VFFSL(SL,"len_val_offset_w",True) # '${len_val_offset_w}' on line 10, col 75
        if _v is not None: write(_filter(_v, rawExpr='${len_val_offset_w}')) # from line 10, col 75.
        write(''' ''')
        _v = VFFSL(SL,"bytes_per_count_w",True) # '${bytes_per_count_w}' on line 10, col 95
        if _v is not None: write(_filter(_v, rawExpr='${bytes_per_count_w}')) # from line 10, col 95.
        write(''' ''')
        _v = VFFSL(SL,"endianness_w",True) # '${endianness_w}' on line 10, col 116
        if _v is not None: write(_filter(_v, rawExpr='${endianness_w}')) # from line 10, col 116.
        write(''' ''')
        _v = VFFSL(SL,"discard_leading_w",True) # '${discard_leading_w}' on line 10, col 132
        if _v is not None: write(_filter(_v, rawExpr='${discard_leading_w}')) # from line 10, col 132.
        write(''' ''')
        _v = VFFSL(SL,"sync_w",True) # '${sync_w}' on line 10, col 153
        if _v is not None: write(_filter(_v, rawExpr='${sync_w}')) # from line 10, col 153.
        write(''' ''')
        _v = VFFSL(SL,"has_max_length_w",True) # '${has_max_length_w}' on line 10, col 163
        if _v is not None: write(_filter(_v, rawExpr='${has_max_length_w}')) # from line 10, col 163.
        write(''' ''')
        _v = VFFSL(SL,"fill_ls_w",True) # '${fill_ls_w}' on line 10, col 183
        if _v is not None: write(_filter(_v, rawExpr='${fill_ls_w}')) # from line 10, col 183.
        write('''
  PROTOCOL READ  ''')
        _v = VFFSL(SL,"protocol_name_r",True) # '${protocol_name_r}' on line 11, col 18
        if _v is not None: write(_filter(_v, rawExpr='${protocol_name_r}')) # from line 11, col 18.
        write(''' ''')
        _v = VFFSL(SL,"len_bit_offset_r",True) # '${len_bit_offset_r}' on line 11, col 37
        if _v is not None: write(_filter(_v, rawExpr='${len_bit_offset_r}')) # from line 11, col 37.
        write(''' ''')
        _v = VFFSL(SL,"len_bit_size_r",True) # '${len_bit_size_r}' on line 11, col 57
        if _v is not None: write(_filter(_v, rawExpr='${len_bit_size_r}')) # from line 11, col 57.
        write(''' ''')
        _v = VFFSL(SL,"len_val_offset_r",True) # '${len_val_offset_r}' on line 11, col 75
        if _v is not None: write(_filter(_v, rawExpr='${len_val_offset_r}')) # from line 11, col 75.
        write(''' ''')
        _v = VFFSL(SL,"bytes_per_count_r",True) # '${bytes_per_count_r}' on line 11, col 95
        if _v is not None: write(_filter(_v, rawExpr='${bytes_per_count_r}')) # from line 11, col 95.
        write(''' ''')
        _v = VFFSL(SL,"endianness_r",True) # '${endianness_r}' on line 11, col 116
        if _v is not None: write(_filter(_v, rawExpr='${endianness_r}')) # from line 11, col 116.
        write(''' ''')
        _v = VFFSL(SL,"discard_leading_r",True) # '${discard_leading_r}' on line 11, col 132
        if _v is not None: write(_filter(_v, rawExpr='${discard_leading_r}')) # from line 11, col 132.
        write(''' ''')
        _v = VFFSL(SL,"sync_r",True) # '${sync_r}' on line 11, col 153
        if _v is not None: write(_filter(_v, rawExpr='${sync_r}')) # from line 11, col 153.
        write(''' ''')
        _v = VFFSL(SL,"has_max_length_r",True) # '${has_max_length_r}' on line 11, col 163
        if _v is not None: write(_filter(_v, rawExpr='${has_max_length_r}')) # from line 11, col 163.
        write(''' ''')
        _v = VFFSL(SL,"fill_ls_r",True) # '${fill_ls_r}' on line 11, col 183
        if _v is not None: write(_filter(_v, rawExpr='${fill_ls_r}')) # from line 11, col 183.
        write('''
''')
        if VFFSL(SL,"use_router",True): # generated from line 12, col 1
            write('''ROUTER ''')
            _v = VFFSL(SL,"target_name",True) # '${target_name}' on line 13, col 8
            if _v is not None: write(_filter(_v, rawExpr='${target_name}')) # from line 13, col 8.
            write('''_ROUTER tcpip_server_interface.rb ''')
            _v = VFFSL(SL,"router_write_port",True) # '${router_write_port}' on line 13, col 56
            if _v is not None: write(_filter(_v, rawExpr='${router_write_port}')) # from line 13, col 56.
            write(''' ''')
            _v = VFFSL(SL,"router_read_port",True) # '${router_read_port}' on line 13, col 77
            if _v is not None: write(_filter(_v, rawExpr='${router_read_port}')) # from line 13, col 77.
            write(''' ''')
            _v = VFFSL(SL,"write_timeout",True) # '${write_timeout}' on line 13, col 97
            if _v is not None: write(_filter(_v, rawExpr='${write_timeout}')) # from line 13, col 97.
            write(''' nil
  ROUTE ''')
            _v = VFFSL(SL,"target_name",True) # '${target_name}' on line 14, col 9
            if _v is not None: write(_filter(_v, rawExpr='${target_name}')) # from line 14, col 9.
            write('''_INT
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_Server = 'respond'

## END CLASS DEFINITION

if not hasattr(Server, '_initCheetahAttributes'):
    templateAPIClass = getattr(Server,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Server)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Server()).run()


