#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.3'
__CHEETAH_versionTuple__ = (3, 2, 3, 'final', 0)
__CHEETAH_genTime__ = 1558020935.132985
__CHEETAH_genTimestamp__ = 'Thu May 16 08:35:35 2019'
__CHEETAH_src__ = 'Channel.tmpl'
__CHEETAH_srcLastModified__ = 'Thu May 16 08:22:51 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Channel(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Channel, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''# Created on ''')
        _v = VFFSL(SL,"date",True) # '${date}' on line 1, col 14
        if _v is not None: write(_filter(_v, rawExpr='${date}')) # from line 1, col 14.
        write('''
# Author: ''')
        _v = VFFSL(SL,"user",True) # '${user}' on line 2, col 11
        if _v is not None: write(_filter(_v, rawExpr='${user}')) # from line 2, col 11.
        write('''
''')
        _v = "#\n"
        if _v is not None: write(_filter(_v))
        write('''# THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT!!!
''')
        _v = "#\n"
        if _v is not None: write(_filter(_v))
        write('''# Component Source: ''')
        _v = VFFSL(SL,"source",True) # '${source}' on line 6, col 21
        if _v is not None: write(_filter(_v, rawExpr='${source}')) # from line 6, col 21.
        write('''

# COMPONENT: "''')
        _v = VFFSL(SL,"component_string",True) # '${component_string}' on line 8, col 15
        if _v is not None: write(_filter(_v, rawExpr='${component_string}')) # from line 8, col 15.
        write('''"
TELEMETRY ''')
        _v = VFFSL(SL,"target_caps",True) # '${target_caps}' on line 9, col 11
        if _v is not None: write(_filter(_v, rawExpr='${target_caps}')) # from line 9, col 11.
        write(''' ''')
        _v = VFFSL(SL,"ch_name",True) # '${ch_name}' on line 9, col 26
        if _v is not None: write(_filter(_v, rawExpr='${ch_name}')) # from line 9, col 26.
        write(''' ''')
        _v = VFFSL(SL,"endianness",True) # '${endianness}' on line 9, col 37
        if _v is not None: write(_filter(_v, rawExpr='${endianness}')) # from line 9, col 37.
        write(''' "''')
        _v = VFFSL(SL,"ch_desc",True) # '${ch_desc}' on line 9, col 52
        if _v is not None: write(_filter(_v, rawExpr='${ch_desc}')) # from line 9, col 52.
        write('''"
<%=render "_''')
        _v = VFFSL(SL,"target_lower",True) # '${target_lower}' on line 10, col 30
        if _v is not None: write(_filter(_v, rawExpr='${target_lower}')) # from line 10, col 30.
        write('''_tlm_chn_hdr.txt", locals: {id: ''')
        _v = VFFSL(SL,"id",True) # '${id}' on line 10, col 77
        if _v is not None: write(_filter(_v, rawExpr='${id}')) # from line 10, col 77.
        write('''} %>
    APPEND_ITEM VALUE ''')
        _v = VFFSL(SL,"value_bits",True) # '${value_bits}' on line 11, col 23
        if _v is not None: write(_filter(_v, rawExpr='${value_bits}')) # from line 11, col 23.
        write(''' ''')
        _v = VFFSL(SL,"value_type",True) # '${value_type}' on line 11, col 37
        if _v is not None: write(_filter(_v, rawExpr='${value_type}')) # from line 11, col 37.
        write(''' "Value"
''')
        if not VFFSL(SL,"format_string",True) == "": # generated from line 12, col 1
            write('''      FORMAT_STRING "''')
            _v = VFFSL(SL,"format_string",True) # '$format_string' on line 13, col 22
            if _v is not None: write(_filter(_v, rawExpr='$format_string')) # from line 13, col 22.
            write('''"
''')
        for type in VFFSL(SL,"types",True): # generated from line 15, col 1
            write('''      STATE ''')
            _v = VFFSL(SL,"type",True)[0] # '$type[0]' on line 16, col 13
            if _v is not None: write(_filter(_v, rawExpr='$type[0]')) # from line 16, col 13.
            write(''' ''')
            _v = VFFSL(SL,"type",True)[1] # '$type[1]' on line 16, col 22
            if _v is not None: write(_filter(_v, rawExpr='$type[1]')) # from line 16, col 22.
            write('''
''')
        for persistence, limits_state, red_low, yellow_low, yellow_high, red_high in VFFSL(SL,"limits",True): # generated from line 18, col 1
            write('''      LIMITS DEFAULT ''')
            _v = VFFSL(SL,"persistence",True) # '$persistence' on line 19, col 22
            if _v is not None: write(_filter(_v, rawExpr='$persistence')) # from line 19, col 22.
            write(''' ''')
            _v = VFFSL(SL,"limits_state",True) # '$limits_state' on line 19, col 35
            if _v is not None: write(_filter(_v, rawExpr='$limits_state')) # from line 19, col 35.
            if VFFSL(SL,"red_low",True): # generated from line 20, col 1
                write(''' ''')
                _v = VFFSL(SL,"red_low",True) # '$red_low' on line 21, col 2
                if _v is not None: write(_filter(_v, rawExpr='$red_low')) # from line 21, col 2.
            else: # generated from line 22, col 1
                write(''' 0''')
            if VFFSL(SL,"yellow_low",True): # generated from line 25, col 1
                write(''' ''')
                _v = VFFSL(SL,"yellow_low",True) # '$yellow_low' on line 26, col 2
                if _v is not None: write(_filter(_v, rawExpr='$yellow_low')) # from line 26, col 2.
            else: # generated from line 27, col 1
                write(''' 0''')
            if VFFSL(SL,"yellow_high",True): # generated from line 30, col 1
                write(''' ''')
                _v = VFFSL(SL,"yellow_high",True) # '$yellow_high' on line 31, col 2
                if _v is not None: write(_filter(_v, rawExpr='$yellow_high')) # from line 31, col 2.
            else: # generated from line 32, col 1
                write(''' 0''')
            if VFFSL(SL,"red_high",True): # generated from line 35, col 1
                write(''' ''')
                _v = VFFSL(SL,"red_high",True) # '$red_high' on line 36, col 2
                if _v is not None: write(_filter(_v, rawExpr='$red_high')) # from line 36, col 2.
            else: # generated from line 37, col 1
                write(''' 0''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_Channel = 'respond'

## END CLASS DEFINITION

if not hasattr(Channel, '_initCheetahAttributes'):
    templateAPIClass = getattr(Channel,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Channel)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Channel()).run()


